{"version":3,"sources":["SharedSnackbar.js","SharedSnackbarContext.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["SharedSnackbar","react_default","a","createElement","SharedSnackbarConsumer","_ref","snackbarIsOpen","message","closeSnackbar","index_es","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","action","key","color","onClick","icons_index_es","SharedSnackbarContext","React","createContext","style","display","justifyContent","SharedSnackBarProvider","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isOpen","openSnackbar","setState","inherits","createClass","value","children","props","_this$state","Provider","src_SharedSnackbar","Component","Consumer","alignSelf","margin","height","Button","onClickAction","variant","handleOnClick","_ref$value","_","ToogleFooter","_ref2","_ref2$color","_ref3","src_Button","App","SharedSnackbarContext_SharedSnackBarProvider","Fragment","App_ToogleFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.758fa585.chunk.js","sourcesContent":["import { IconButton, Snackbar } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport React from 'react';\nimport { SharedSnackbarConsumer } from './SharedSnackbarContext';\n\nconst SharedSnackbar = () => {\n  return (\n    <SharedSnackbarConsumer>\n      {({ snackbarIsOpen, message, closeSnackbar }) => {\n        return (\n          <Snackbar\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'center'\n            }}\n            open={snackbarIsOpen}\n            autoHideDuration={2000}\n            onClose={closeSnackbar}\n            message={message}\n            action={[\n              <IconButton key=\"close\" color=\"inherit\" onClick={closeSnackbar}>\n                <Close />\n              </IconButton>\n            ]}\n          />\n        );\n      }}\n    </SharedSnackbarConsumer>\n  );\n};\n\nexport default SharedSnackbar;\n","import React from 'react';\n\nimport SharedSnackbar from './SharedSnackbar';\n\nconst SharedSnackbarContext = React.createContext();\n\nconst style = {\n  display: 'flex',\n  justifyContent: 'center'\n};\n\nexport class SharedSnackBarProvider extends React.Component {\n  state = {\n    isOpen: false,\n    message: ''\n  };\n\n  openSnackbar = message => {\n    this.setState({ message, isOpen: true });\n  };\n\n  closeSnackbar = () => {\n    this.setState({ message: '', isOpen: false });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { isOpen, message } = this.state;\n\n    return (\n      // Note that Providers and Consumers do not take in Style Props\n      <SharedSnackbarContext.Provider\n        value={{\n          openSnackbar: this.openSnackbar,\n          closeSnackbar: this.closeSnackbar,\n          snackbarIsOpen: isOpen,\n          message\n        }}\n      >\n        <div style={style}>\n          {/* The following Components are Consumers; \n        they will import SharedSnackbarConsumer to access actions\n        and state of the app */}\n          {children}\n          <SharedSnackbar />\n        </div>\n      </SharedSnackbarContext.Provider>\n    );\n  }\n}\n\nexport const SharedSnackbarConsumer = SharedSnackbarContext.Consumer;\n","import { Button as ButtonCore } from '@material-ui/core';\nimport React from 'react';\n\nconst style = {\n  alignSelf: 'center',\n  margin: '1rem',\n  height: '2rem'\n};\n\nconst Button = ({ onClickAction, color, value }) => {\n  return (\n    <ButtonCore\n      style={style}\n      variant=\"contained\"\n      color={color}\n      onClick={onClickAction}\n    >\n      {value}\n    </ButtonCore>\n  );\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport {\n  SharedSnackbarConsumer,\n  SharedSnackBarProvider\n} from './SharedSnackbarContext';\nimport Button from './Button';\n\nconst handleOnClick = ({ action, value = '' }) => _ => {\n  action(`You Clicked ${value}`);\n};\n\nconst ToogleFooter = ({ color = 'primary', value }) => (\n  <SharedSnackbarConsumer>\n    {({ openSnackbar }) => (\n      <Button\n        color={color}\n        onClickAction={handleOnClick({\n          action: openSnackbar,\n          value\n        })}\n        value={value}\n      />\n    )}\n  </SharedSnackbarConsumer>\n);\n\nclass App extends Component {\n  render() {\n    return (\n      // Provider contains the state of the app\n      <SharedSnackBarProvider>\n        <React.Fragment>\n          <ToogleFooter color={'secondary'} value={'Button A'} />\n          <ToogleFooter value={'Button B'} />\n        </React.Fragment>\n      </SharedSnackBarProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}